#include "tcpecho.h"
#include "board.h"
 #include "lwip/netif.h"
 #include "lwip/ip.h"
 #include "lwip/tcp.h"
 #include "lwip/init.h"
 #include "netif/etharp.h"
 #include "lwip/udp.h"
 #include "lwip/pbuf.h"
 #include "lwip/tcp.h"
 #include  "fsl_common_arm.h"
 #include <stdio.h>
 #include <string.h>

#define TAIL 3

extern double temp;
extern int touch_flag;
int temp_flag;
char str_send[20],
     str_recv[20];

#if TAIL == 0
char temp_refer[] = "temp",
	 led_red_on[] = "red on",
	 led_red_off[] = "red off",
	 led_blue_on[] = "blue on",
	 led_blue_off[] = "blue off",
	 led_green_on[] = "green on",
	 led_green_off[] = "green off";
#elif TAIL == 1
char temp_refer[] = "temp\r",
	 led_red_on[] = "red on\r",
	 led_red_off[] = "red off\r",
	 led_blue_on[] = "blue on\r",
	 led_blue_off[] = "blue off\r",
	 led_green_on[] = "green on\r",
	 led_green_off[] = "green off\r";
#elif TAIL == 2
char temp_refer[] = "temp\n",
	 led_red_on[] = "red on\n",
	 led_red_off[] = "red off\n",
	 led_blue_on[] = "blue on\n",
	 led_blue_off[] = "blue off\n",
	 led_green_on[] = "green on\n",
	 led_green_off[] = "green off\n";
#elif TAIL == 3
char temp_refer[] = "temp\r\n",
	 led_red_on[] = "red on\r\n",
	 led_red_off[] = "red off\r\n",
	 led_blue_on[] = "blue on\r\n",
	 led_blue_off[] = "blue off\r\n",
	 led_green_on[] = "green on\r\n",
	 led_green_off[] = "green off\r\n";
#elif TAIL == 4
char temp_refer[] = "temp\n\r",
	 led_red_on[] = "red on\n\r",
	 led_red_off[] = "red off\n\r",
	 led_blue_on[] = "blue on\n\r",
	 led_blue_off[] = "blue off\n\r",
	 led_green_on[] = "green on\n\r",
	 led_green_off[] = "green off\n\r";
#endif

 static err_t tcpecho_recv(void *arg,
                         struct tcp_pcb *tpcb,
                         struct pbuf *p,
                         err_t err)
 {
     if (p != NULL)
     {
         /* 更新窗口*/
         tcp_recved(tpcb, p->tot_len);

         strncpy(str_recv,p->payload,p->len);

         str_recv[p->len] = '\0';

         /* 返回接收到的数据*/
//         tcp_write(tpcb, p->payload, p->tot_len, 1);

         PRINTF("[TCP INFO] : %s\r\n",p->payload);

         if(strcmp(str_recv,temp_refer) == 0)
         {
        	 temp_flag = !temp_flag;
         }
         else if(strcmp(str_recv,led_red_on) == 0)
        	 LED_RED_ON();
         else if(strcmp(str_recv,led_red_off) == 0)
             LED_RED_OFF();
         else if(strcmp(str_recv,led_blue_on) == 0)
             LED_BLUE_ON();
         else if(strcmp(str_recv,led_blue_off) == 0)
             LED_BLUE_OFF();
         else if(strcmp(str_recv,led_green_on) == 0)
             LED_GREEN_ON();
         else if(strcmp(str_recv,led_green_off) == 0)
             LED_GREEN_OFF();

         strcpy(str_send,"");
         memset(p->payload, 0 , p->tot_len);
         pbuf_free(p);

     }
     else if (err == ERR_OK)
     {
         return tcp_close(tpcb);
     }
     return ERR_OK;
 }



 static err_t tcpecho_accept(void *arg,
                             struct tcp_pcb *newpcb,
                             err_t err)
 {
     tcp_recv(newpcb, tcpecho_recv);
     return ERR_OK;
 }

 void TCP_Touch_Task(void)
 {
     if(touch_flag)
     {
    	 struct tcp_pcb *pcb;
    	 for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next)
    	 {
    	     tcp_write(pcb, "Touch detected\r\n", strlen("Touch detected\r\n"), 1);
    	 }
    	 touch_flag = 0;
     }
 }

 void TCP_Temp_Task(void)
 {
	 if(temp_flag)
	      {
	     	 struct tcp_pcb *pcb;
	     	 for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next)
	     	 {
	     		sprintf(str_send,"%.2f",temp);
	     		tcp_write(pcb, str_send, sizeof(str_send), 1);
	     	 }
	     	SDK_DelayAtLeastUs(100000, CLOCK_GetCoreSysClkFreq());
	      }
 }

 void TCP_Echo_Init(void)
 {
     struct tcp_pcb *pcb = NULL;

     /* 创建一个TCP控制块  */
     pcb = tcp_new();

     /* 绑定TCP控制块 */
     tcp_bind(pcb, IP_ADDR_ANY, TCP_ECHO_PORT);


     /* 进入监听状态 */
     pcb = tcp_listen(pcb);

     /* 处理连接 */
     tcp_accept(pcb, tcpecho_accept);
 }
